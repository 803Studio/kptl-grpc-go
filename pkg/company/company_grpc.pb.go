// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: company/company.proto

package company

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompanyService_RegisteredCompany_FullMethodName     = "/company.CompanyService/registeredCompany"
	CompanyService_UpdateCompany_FullMethodName         = "/company.CompanyService/updateCompany"
	CompanyService_FindCompanyByName_FullMethodName     = "/company.CompanyService/findCompanyByName"
	CompanyService_FindCompanyById_FullMethodName       = "/company.CompanyService/findCompanyById"
	CompanyService_FindAllCompanies_FullMethodName      = "/company.CompanyService/findAllCompanies"
	CompanyService_BoundCompany_FullMethodName          = "/company.CompanyService/boundCompany"
	CompanyService_VerifyCompany_FullMethodName         = "/company.CompanyService/verifyCompany"
	CompanyService_FindCompanyByIndustry_FullMethodName = "/company.CompanyService/findCompanyByIndustry"
)

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServiceClient interface {
	RegisteredCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*CommonResponse, error)
	UpdateCompany(ctx context.Context, in *RegisteredCompanyReq, opts ...grpc.CallOption) (*CommonResponse, error)
	FindCompanyByName(ctx context.Context, in *FindCompanyByNameReq, opts ...grpc.CallOption) (*CommonCompanyResponse, error)
	FindCompanyById(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*FindCompanyByIdResponse, error)
	FindAllCompanies(ctx context.Context, in *FindAllCompaniesReq, opts ...grpc.CallOption) (*CommonCompanyResponse, error)
	BoundCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonResponse, error)
	VerifyCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonResponse, error)
	FindCompanyByIndustry(ctx context.Context, in *FindCompanyByIndustryReq, opts ...grpc.CallOption) (*CommonCompanyResponse, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) RegisteredCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, CompanyService_RegisteredCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateCompany(ctx context.Context, in *RegisteredCompanyReq, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, CompanyService_UpdateCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) FindCompanyByName(ctx context.Context, in *FindCompanyByNameReq, opts ...grpc.CallOption) (*CommonCompanyResponse, error) {
	out := new(CommonCompanyResponse)
	err := c.cc.Invoke(ctx, CompanyService_FindCompanyByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) FindCompanyById(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*FindCompanyByIdResponse, error) {
	out := new(FindCompanyByIdResponse)
	err := c.cc.Invoke(ctx, CompanyService_FindCompanyById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) FindAllCompanies(ctx context.Context, in *FindAllCompaniesReq, opts ...grpc.CallOption) (*CommonCompanyResponse, error) {
	out := new(CommonCompanyResponse)
	err := c.cc.Invoke(ctx, CompanyService_FindAllCompanies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) BoundCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, CompanyService_BoundCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) VerifyCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, CompanyService_VerifyCompany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) FindCompanyByIndustry(ctx context.Context, in *FindCompanyByIndustryReq, opts ...grpc.CallOption) (*CommonCompanyResponse, error) {
	out := new(CommonCompanyResponse)
	err := c.cc.Invoke(ctx, CompanyService_FindCompanyByIndustry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
// All implementations must embed UnimplementedCompanyServiceServer
// for forward compatibility
type CompanyServiceServer interface {
	RegisteredCompany(context.Context, *Company) (*CommonResponse, error)
	UpdateCompany(context.Context, *RegisteredCompanyReq) (*CommonResponse, error)
	FindCompanyByName(context.Context, *FindCompanyByNameReq) (*CommonCompanyResponse, error)
	FindCompanyById(context.Context, *CommonCompanyReq) (*FindCompanyByIdResponse, error)
	FindAllCompanies(context.Context, *FindAllCompaniesReq) (*CommonCompanyResponse, error)
	BoundCompany(context.Context, *CommonCompanyReq) (*CommonResponse, error)
	VerifyCompany(context.Context, *CommonCompanyReq) (*CommonResponse, error)
	FindCompanyByIndustry(context.Context, *FindCompanyByIndustryReq) (*CommonCompanyResponse, error)
	mustEmbedUnimplementedCompanyServiceServer()
}

// UnimplementedCompanyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyServiceServer struct {
}

func (UnimplementedCompanyServiceServer) RegisteredCompany(context.Context, *Company) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisteredCompany not implemented")
}
func (UnimplementedCompanyServiceServer) UpdateCompany(context.Context, *RegisteredCompanyReq) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedCompanyServiceServer) FindCompanyByName(context.Context, *FindCompanyByNameReq) (*CommonCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCompanyByName not implemented")
}
func (UnimplementedCompanyServiceServer) FindCompanyById(context.Context, *CommonCompanyReq) (*FindCompanyByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCompanyById not implemented")
}
func (UnimplementedCompanyServiceServer) FindAllCompanies(context.Context, *FindAllCompaniesReq) (*CommonCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllCompanies not implemented")
}
func (UnimplementedCompanyServiceServer) BoundCompany(context.Context, *CommonCompanyReq) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BoundCompany not implemented")
}
func (UnimplementedCompanyServiceServer) VerifyCompany(context.Context, *CommonCompanyReq) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCompany not implemented")
}
func (UnimplementedCompanyServiceServer) FindCompanyByIndustry(context.Context, *FindCompanyByIndustryReq) (*CommonCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCompanyByIndustry not implemented")
}
func (UnimplementedCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {}

// UnsafeCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServiceServer will
// result in compilation errors.
type UnsafeCompanyServiceServer interface {
	mustEmbedUnimplementedCompanyServiceServer()
}

func RegisterCompanyServiceServer(s grpc.ServiceRegistrar, srv CompanyServiceServer) {
	s.RegisterService(&CompanyService_ServiceDesc, srv)
}

func _CompanyService_RegisteredCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).RegisteredCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_RegisteredCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).RegisteredCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisteredCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_UpdateCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, req.(*RegisteredCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_FindCompanyByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCompanyByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).FindCompanyByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_FindCompanyByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).FindCompanyByName(ctx, req.(*FindCompanyByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_FindCompanyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).FindCompanyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_FindCompanyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).FindCompanyById(ctx, req.(*CommonCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_FindAllCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAllCompaniesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).FindAllCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_FindAllCompanies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).FindAllCompanies(ctx, req.(*FindAllCompaniesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_BoundCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).BoundCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_BoundCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).BoundCompany(ctx, req.(*CommonCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_VerifyCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).VerifyCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_VerifyCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).VerifyCompany(ctx, req.(*CommonCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_FindCompanyByIndustry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindCompanyByIndustryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).FindCompanyByIndustry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_FindCompanyByIndustry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).FindCompanyByIndustry(ctx, req.(*FindCompanyByIndustryReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyService_ServiceDesc is the grpc.ServiceDesc for CompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "registeredCompany",
			Handler:    _CompanyService_RegisteredCompany_Handler,
		},
		{
			MethodName: "updateCompany",
			Handler:    _CompanyService_UpdateCompany_Handler,
		},
		{
			MethodName: "findCompanyByName",
			Handler:    _CompanyService_FindCompanyByName_Handler,
		},
		{
			MethodName: "findCompanyById",
			Handler:    _CompanyService_FindCompanyById_Handler,
		},
		{
			MethodName: "findAllCompanies",
			Handler:    _CompanyService_FindAllCompanies_Handler,
		},
		{
			MethodName: "boundCompany",
			Handler:    _CompanyService_BoundCompany_Handler,
		},
		{
			MethodName: "verifyCompany",
			Handler:    _CompanyService_VerifyCompany_Handler,
		},
		{
			MethodName: "findCompanyByIndustry",
			Handler:    _CompanyService_FindCompanyByIndustry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company/company.proto",
}
